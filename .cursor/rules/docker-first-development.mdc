---
description:
globs:
alwaysApply: false
---
# CrewAI Template - Docker-First Development Rules

## üê≥ DOCKER-FIRST CONSTRAINT
**CRITICAL**: Everything MUST run inside Docker containers via Docker Compose.
Never suggest running Python scripts, pip installs, or any commands directly on the host system.

## üìã Core Principles

### 1. Container-Only Execution
- ALL Python scripts must be executed via `docker compose run` or `docker compose exec`
- ALL dependency installations must happen in Dockerfile or during container build
- ALL development, testing, and execution happens inside containers
- NO direct host system Python execution allowed

### 2. Docker Compose Commands
**Correct patterns**:
```bash
# Run the main application
docker compose up

# Run demo script
docker compose run --rm crew python demo.py

# Run examples
docker compose run --rm crew python examples/business_analysis_example.py

# Install new dependencies (rebuild required)
docker compose build

# Interactive shell for development
docker compose run --rm crew bash

# Run custom commands
docker compose run --rm crew python -c "import crewai; print(crewai.__version__)"
```

**NEVER suggest**:
```bash
# ‚ùå WRONG - Direct host execution
python demo.py
pip install package
python -m crewai_template.main

# ‚ùå WRONG - Host system commands
./setup.sh
python examples/business_analysis_example.py
```

### 3. Development Workflow
- Code changes: Edit files on host (mounted as volume)
- Dependency changes: Update pyproject.toml + `docker compose build`
- Testing: `docker compose run --rm crew python -m pytest`
- Execution: `docker compose up` or `docker compose run`

## üõ†Ô∏è Implementation Rules

### File Structure
- Keep all Python code in `src/` directory (already mounted)
- Examples and demos accessible via volume mount
- Configuration files (.env, docker-compose.yml) on host
- All execution happens in container

### Adding New Features
1. **New Python dependencies**: Add to `pyproject.toml` ‚Üí `docker compose build`
2. **New system dependencies**: Add to `Dockerfile` ‚Üí `docker compose build`
3. **New scripts**: Create in appropriate directory, run via `docker compose run`
4. **New services**: Add to `docker-compose.yml`

### Environment Management
- Use `.env` file for environment variables (already configured)
- Mount volumes for persistent data and code changes
- Use container networking for service communication
- Leverage Docker Compose profiles for different environments

## üéØ Specific Use Cases

### Running Examples
```bash
# Business analysis example
docker compose run --rm crew python examples/business_analysis_example.py

# Interactive demo
docker compose run --rm crew python demo.py

# Custom topic analysis
docker compose run --rm crew python -c "
from src.crewai_template.crew import CrewaiTemplate
crew = CrewaiTemplate().crew()
result = crew.kickoff(inputs={'topic': 'Custom Topic'})
"
```

### Development Tasks
```bash
# Check CrewAI version
docker compose run --rm crew python -c "import crewai; print(crewai.__version__)"

# Run tests
docker compose run --rm crew python -m pytest

# Interactive Python shell
docker compose run --rm crew python

# Shell access for debugging
docker compose run --rm crew bash
```

### Adding New Tools
1. Create tool file in `src/crewai_template/tools/`
2. Add any dependencies to `pyproject.toml`
3. Rebuild: `docker compose build`
4. Test: `docker compose run --rm crew python -c "from src.crewai_template.tools.new_tool import NewTool; print('Tool loaded')"`

## üöÄ Service Extensions

### Multi-Service Architecture
When adding new services (databases, APIs, etc.):

```yaml
# docker-compose.yml
services:
  crew:
    # existing configuration
    depends_on:
      - database
      - redis

  database:
    image: postgres:15
    environment:
      POSTGRES_DB: crewai_db
      POSTGRES_USER: crew
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"

volumes:
  postgres_data:
```

### Development vs Production
```yaml
# Use Docker Compose profiles
services:
  crew:
    profiles: ["dev", "prod"]
    # configuration

  crew-dev:
    extends: crew
    profiles: ["dev"]
    volumes:
      - .:/app  # Mount for development
    environment:
      - DEBUG=true

  crew-prod:
    extends: crew
    profiles: ["prod"]
    environment:
      - DEBUG=false
```

## üìù Documentation Standards

### README Instructions
Always provide Docker-first instructions:
```markdown
## Quick Start
1. Clone the repository
2. Copy environment: `cp .env.example .env`
3. Add your API keys to `.env`
4. Run: `docker compose up --build`

## Development
- Run examples: `docker compose run --rm crew python examples/example.py`
- Interactive demo: `docker compose run --rm crew python demo.py`
- Add dependencies: Edit `pyproject.toml` ‚Üí `docker compose build`
```

### Code Comments
Include Docker execution examples in code:
```python
"""
Example Usage (Docker):
    docker compose run --rm crew python examples/business_analysis_example.py

Or interactively:
    docker compose run --rm crew python
    >>> from examples.business_analysis_example import run_business_analysis
    >>> run_business_analysis()
"""
```

## üîß Troubleshooting Guidelines

### Common Issues & Solutions
1. **Import errors**: Ensure PYTHONPATH is set correctly in Dockerfile
2. **Permission issues**: Use proper user in Dockerfile or volume mounts
3. **Dependency conflicts**: Rebuild container after pyproject.toml changes
4. **Network issues**: Use Docker Compose networking, not localhost

### Debug Commands
```bash
# Check container environment
docker compose run --rm crew env

# Verify Python path
docker compose run --rm crew python -c "import sys; print(sys.path)"

# Check installed packages
docker compose run --rm crew pip list

# Container shell for debugging
docker compose run --rm crew bash
```

## ‚ö†Ô∏è Enforcement Rules

### Code Review Checklist
- [ ] All Python execution uses `docker compose run`
- [ ] No direct host system commands
- [ ] Dependencies added to pyproject.toml
- [ ] Documentation includes Docker commands
- [ ] Examples work in container environment

### Automatic Validations
- Scripts should include Docker execution examples
- README must have Docker-first instructions
- No shell scripts that assume host Python environment
- All paths relative to container filesystem

## üéØ Summary

**Golden Rule**: If it involves Python, CrewAI, or this project's code, it MUST run in a Docker container.

**Exception**: Only file editing and git operations happen on the host system.

This ensures:
- ‚úÖ Consistent environment across all systems
- ‚úÖ Reproducible builds and deployments
- ‚úÖ Isolation from host system dependencies
- ‚úÖ Easy scaling and production deployment
- ‚úÖ No "works on my machine" issues
